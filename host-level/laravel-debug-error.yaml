id: laravel-debug-error
info:
  name: Larvel Debug Method Enabled
  author: dhiyaneshDK
  severity: medium
  description: The described vulnerability relates to the unintentional enablement
    of the Larvel framework's debug functionality in a production environment. This
    can have severe security implications, as the debug mode may expose sensitive
    information, such as database credentials, API keys, and other confidential details,
    that an attacker could leverage to launch further attacks or compromise the system.
    Additionally, the debug mode may allow the attacker to execute arbitrary PHP code
    on the server, potentially leading to remote code execution (RCE) and complete
    control of the system. The vulnerability also enables the bypassing of authentication
    mechanisms, granting the attacker access to restricted areas of the application
    and potentially compromising user accounts and data. Furthermore, the attacker
    may be able to dump the application's entire database, including user information,
    orders, and other sensitive data, leading to a significant data breach. Finally,
    the attacker could modify the application's code, inject malicious content, or
    deface the website, causing reputational damage and service disruption. To mitigate
    this vulnerability, the Larvel Debug mode must be disabled in the production environment,
    and the application's code and configuration should be reviewed to ensure that
    no other debug-related features or settings are enabled.
  metadata:
    max-request: 1
  tags: debug,laravel,misconfig
  impact: '- An attacker could gain access to sensitive information, such as database
    credentials, API keys, and other confidential details, which could be used to
    launch further attacks or compromise the system.

    - The attacker could potentially execute arbitrary PHP code on the server, potentially
    leading to remote code execution (RCE) and complete control of the system.

    - The attacker could bypass authentication mechanisms and access restricted areas
    of the application, potentially compromising user accounts and data.

    - The attacker could dump the application''s entire database, including user information,
    orders, and other sensitive data, leading to a significant data breach.

    - The attacker could modify the application''s code, inject malicious content,
    or deface the website, potentially causing reputational damage and service disruption.'
  remediation: 'The Larvel Debug method should be disabled in production environments,
    as it poses a significant security risk. This feature is intended for development
    and debugging purposes only and should never be enabled in a live environment.
    Leaving the debug mode active can expose sensitive information and allow attackers
    to exploit the system, potentially leading to data breaches, remote code execution,
    and complete system compromise.


    - Ensure that the Larvel Debug mode is disabled in the production environment.
    This can typically be done by setting the `APP_DEBUG` environment variable to
    `false` or by removing the debug-related configuration from the application''s
    environment files.

    - Review the application''s code and configuration to identify any other debug-related
    features or settings that may be enabled in production and ensure they are properly
    secured or disabled.

    - Implement proper access controls and authentication mechanisms to restrict access
    to sensitive areas of the application and prevent unauthorized access to debug
    or administrative functionality.

    - Regularly review the application''s logs and monitor for any suspicious activity,
    such as attempted access to debug endpoints or unusual database queries, that
    may indicate an ongoing attack.

    - Ensure that the application is regularly updated with the latest security patches
    and that any known vulnerabilities are addressed in a timely manner.'
http:
- method: GET
  path:
  - '{{BaseURL}}'
  - '{{BaseURL}}///////this-should-not-exist,.<>!@#$%^&*()_+'
  - '{{BaseURL}}/%00'
  stop-at-first-match: true
  matchers-condition: and
  matchers:
  - type: word
    words:
    - <title>Whoops! There was an error
