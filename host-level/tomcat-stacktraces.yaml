id: tomcat-stacktraces
info:
  name: Tomcat Stack Traces Enabled
  author: lucky0x0d
  severity: info
  description: The "Tomcat Stack Traces Enabled" vulnerability arises when the web
    server is configured to display detailed stack trace information in the event
    of an error or exception. This can occur due to improper error handling or misconfiguration
    within the Tomcat application server. The exposure of these stack traces can be
    a significant security concern, as they may reveal sensitive information about
    the server's architecture, software versions, and potential vulnerabilities. An
    attacker could leverage this information to gain valuable insights, enabling them
    to craft more targeted and sophisticated attacks, such as identifying weaknesses
    in the server's configuration or potential routes for privilege escalation. Additionally,
    the disclosure of sensitive server-side information through the stack traces could
    lead to a breach of confidentiality, as the attacker may gain access to sensitive
    data or internal network details. To mitigate this vulnerability, it is crucial
    to disable the display of detailed stack trace information in the production environment
    and implement appropriate error handling and logging mechanisms that do not expose
    sensitive server-side information.
  classification:
    cpe: cpe:2.3:a:apache:tomcat:*:*:*:*:*:*:*:*
  metadata:
    verified: true
    max-request: 1
    vendor: apache
    product: tomcat
    shodan-query: title:"Apache Tomcat"
  tags: misconfig,tech,tomcat,apache
  impact: '- An attacker could leverage the Tomcat stack traces to gain valuable information
    about the server''s architecture, software versions, and potential vulnerabilities.

    - The detailed stack trace information could be used to launch more targeted attacks,
    such as identifying weaknesses in the server''s configuration or potential routes
    for privilege escalation.

    - An attacker could exploit the information disclosed in the stack traces to craft
    precise payloads for remote code execution or other types of attacks, further
    compromising the system.

    - The exposure of sensitive server-side information through the Tomcat stack traces
    could lead to a breach of confidentiality, as the attacker may gain access to
    sensitive data or internal network details.

    - The availability of Tomcat stack traces could also enable an attacker to better
    understand the application''s logic and potentially identify additional attack
    vectors for further exploitation.'
  remediation: 'To address the "Tomcat Stack Traces Enabled" vulnerability, it is
    crucial to disable the display of detailed stack trace information in the production
    environment. Stack traces can provide valuable information to attackers, enabling
    them to gain insight into the server''s architecture, software versions, and potential
    vulnerabilities. This information could be leveraged to launch more targeted and
    sophisticated attacks, potentially leading to a breach of confidentiality, integrity,
    or availability of the system.


    Specific steps for developers to follow:


    - Review the Tomcat configuration file (typically found in the `conf/web.xml`
    or `conf/catalina.properties` files) and locate the settings related to error
    handling and stack trace display.

    - Ensure that the `showDebugInfo` and `showServerInfo` parameters are set to `false`
    or removed entirely to prevent the display of detailed stack trace information.

    - Implement appropriate error handling and logging mechanisms that do not expose
    sensitive server-side information in the event of an error or exception.

    - Ensure that any custom error pages or exception handling mechanisms do not inadvertently
    display stack trace information.

    - Perform thorough testing to verify that stack trace information is not being
    displayed in the production environment, either directly or through any third-party
    components or libraries used by the application.'
http:
- method: GET
  path:
  - '{{BaseURL}}/?f=\['
  matchers:
  - type: dsl
    dsl:
    - contains(body, "tomcat")
    - contains(body, "org.apache")
    - status_code == 400
    condition: and
