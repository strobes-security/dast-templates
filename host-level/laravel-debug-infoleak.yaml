id: laravel-debug-infoleak
info:
  name: Laravel Debug Info Leak
  author: pwnhxl
  severity: medium
  description: 'This template can be used to detect a Laravel debug information leak
    by making a POST-based request.

    '
  reference:
  - https://github.com/dem0ns/improper/blob/master/laravel/5_debug/1.png
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N
    cvss-score: 6.5
    cwe-id: CWE-215
    cpe: cpe:2.3:a:laravel:framework:*:*:*:*:*:*:*:*
  metadata:
    verified: true
    max-request: 1
    shodan-query: Laravel-Framework
    fofa-query: app="Laravel-Framework"
    product: framework
    vendor: laravel
  tags: misconfig,laravel,debug,infoleak
  impact: '- Gain access to sensitive application configuration details, such as database
    credentials, API keys, and other sensitive information.

    - Obtain information about the server''s operating system, web server software,
    and other infrastructure details that could be used to plan further attack.

    - Potentially discover additional vulnerabilities or attack surfaces by leveraging
    the leaked information.

    - Understand the application''s internal structure and logic, which could aid
    in developing more targeted attacks.

    - Increase the attacker''s understanding of the target environment, allowing them
    to refine their attack strategies and increase the chances of a successful intrusion.'
  remediation: 'To address the "Laravel Debug Info Leak" vulnerability, it is crucial
    to disable the debug mode in the production environment and ensure that sensitive
    information is not exposed to potential attackers. Here are the steps developers
    should follow:


    - Review the application''s configuration files (e.g., `.env`) and ensure that
    the `APP_DEBUG` parameter is set to `false` in the production environment.

    - Implement proper error handling and logging mechanisms to avoid accidentally
    leaking sensitive information in error messages or logs.

    - Regularly review the application''s code and configuration to identify and remove
    any instances where sensitive information is being directly displayed or logged.

    - Consider implementing a secure logging solution that redacts or obfuscates sensitive
    data, such as database credentials, API keys, and other sensitive information.

    - Ensure that the application is running with the appropriate security headers,
    such as `X-XSS-Protection`, `X-Frame-Options`, and `Content-Security-Policy`,
    to help mitigate additional security risks.'
http:
- raw:
  - 'POST / HTTP/1.1

    Host: {{Hostname}}

    '
  matchers-condition: and
  matchers:
  - type: word
    part: body
    words:
    - vendor/laravel/framework/src/Illuminate/
    - MethodNotAllowedHttpException
    condition: and
  - type: word
    part: body
    words:
    - DB_PASSWORD
    - REDIS_PASSWORD
    - MAIL_PASSWORD
    - ALIYUN_ACCESSKEYSECRET
    - ALIYUN_ACCESSKEYID
    - SMS_AUTH_TOKEN
    - APP_KEY
    condition: or
  - type: status
    status:
    - 405
