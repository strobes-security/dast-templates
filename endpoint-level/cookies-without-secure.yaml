id: cookies-without-secure
info:
  name: Cookies without Secure attribute - Detect
  author: vthiery,RJ Coleman
  severity: info
  description: The issue of cookies without the Secure attribute being transmitted
    over unsecured HTTP connections poses a significant security risk. This vulnerability
    allows the cookie's contents to be exposed to potential eavesdropping and manipulation
    by attackers conducting man-in-the-middle (MITM) attacks. By failing to set the
    Secure attribute on cookies, the application allows them to be sent over an insecure
    channel, potentially revealing sensitive information or enabling unauthorized
    access. To address this vulnerability, it is crucial to review all cookie settings
    and ensure that the Secure attribute is consistently applied. This will instruct
    the browser to only transmit the cookies over a secure HTTPS connection, mitigating
    the risk of MITM attacks and protecting the confidentiality and integrity of the
    application's data.
  impact: '- Potential exposure of sensitive information contained within the cookies,
    such as session IDs, authentication tokens, or user data.

    - Ability for attackers to intercept and potentially modify the cookie contents,
    leading to unauthorized access or privilege escalation.

    - Risk of session hijacking, where an attacker can use the intercepted cookie
    to impersonate a legitimate user and gain unauthorized access to the application.

    - Potential for attackers to conduct man-in-the-middle (MITM) attacks, intercepting
    and tampering with the communication between the client and the server.

    - Increased vulnerability to other attacks, such as cross-site scripting (XSS)
    or cross-site request forgery (CSRF), due to the exposure of the cookie contents.'
  remediation: 'Cookies without the Secure attribute can be transmitted over unsecured
    HTTP, exposing the cookie''s contents to potential eavesdropping and manipulation
    by attackers. To address this vulnerability, it is essential to ensure that all
    cookies are set with the Secure attribute. This will instruct the browser to only
    transmit the cookie over a secure HTTPS connection, mitigating the risk of man-in-the-middle
    attacks.


    - Review all cookie settings in your application and ensure that the Secure attribute
    is set for each cookie.

    - Implement a policy to enforce the use of the Secure attribute for all cookies,
    regardless of the data they contain.

    - Update your web server configuration to redirect all HTTP traffic to HTTPS,
    ensuring that cookies are only transmitted over a secure connection.

    - Consider implementing a Content Security Policy (CSP) or other web security
    measures to further enhance the security of your application.

    - Regularly audit your application''s cookie settings and update them as needed
    to address any changes or new vulnerabilities.'
  reference:
  - https://owasp.org/www-community/controls/SecureCookieAttribute
  classification:
    cvss-metrics: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N
    cvss-score: 0
  metadata:
    verified: true
    max-request: 1
  tags: misconfig,http,cookie,generic
flow: 'http()

  javascript()

  '
http:
- method: GET
  path:
  - '{{BaseURL}}'
  host-redirects: true
  max-redirects: 2
javascript:
- code: "content = template.http_all_headers\nconst setCookieLines = content\n  .split(/\\\
    r\\n/)\n  .filter(line => line.trim().toLowerCase().startsWith('set-cookie:'));\n\
    const nonSecureCookies = setCookieLines.filter(line => !line.toLowerCase().includes('secure'));\n\
    const cookieNames = nonSecureCookies.map(line => {\n  const match = line.match(/set-cookie:\\\
    s*([^=]+)=/i);\n  return match ? match[1] : null;\n}).filter(Boolean);\ncookieNames\n"
  extractors:
  - type: regex
    regex:
    - '[a-zA-Z0-9_-]+'
