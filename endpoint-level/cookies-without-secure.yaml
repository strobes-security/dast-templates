id: cookies-without-secure
info:
  name: Cookies without Secure attribute - Detect
  author: vthiery,RJ Coleman
  severity: info
  description: 'Checks whether cookies in the HTTP response contain the Secure attribute.
    If the Secure flag is set, it means that the cookie can only be transmitted over
    HTTPS

    '
  impact: 'Lack of Secure flag on cookies allows the cookie to be sent over unsecure
    HTTP, making it vulnerable to man-in-the-middle (MITM) attacks.

    '
  remediation: 'Cookies without the Secure attribute can be transmitted over unsecured
    HTTP, exposing the cookie''s contents to potential eavesdropping and manipulation
    by attackers. To address this vulnerability, it is essential to ensure that all
    cookies are set with the Secure attribute. This will instruct the browser to only
    transmit the cookie over a secure HTTPS connection, mitigating the risk of man-in-the-middle
    attacks.


    - Review all cookie settings in your application and ensure that the Secure attribute
    is set for each cookie.

    - Implement a policy to enforce the use of the Secure attribute for all cookies,
    regardless of the data they contain.

    - Update your web server configuration to redirect all HTTP traffic to HTTPS,
    ensuring that cookies are only transmitted over a secure connection.

    - Consider implementing a Content Security Policy (CSP) or other web security
    measures to further enhance the security of your application.

    - Regularly audit your application''s cookie settings and update them as needed
    to address any changes or new vulnerabilities.'
  reference:
  - https://owasp.org/www-community/controls/SecureCookieAttribute
  classification:
    cvss-metrics: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N
    cvss-score: 0
  metadata:
    verified: true
    max-request: 1
  tags: misconfig,http,cookie,generic
flow: 'http()

  javascript()

  '
http:
- method: GET
  path:
  - '{{BaseURL}}'
  host-redirects: true
  max-redirects: 2
javascript:
- code: "content = template.http_all_headers\nconst setCookieLines = content\n  .split(/\\\
    r\\n/)\n  .filter(line => line.trim().toLowerCase().startsWith('set-cookie:'));\n\
    const nonSecureCookies = setCookieLines.filter(line => !line.toLowerCase().includes('secure'));\n\
    const cookieNames = nonSecureCookies.map(line => {\n  const match = line.match(/set-cookie:\\\
    s*([^=]+)=/i);\n  return match ? match[1] : null;\n}).filter(Boolean);\ncookieNames\n"
  extractors:
  - type: regex
    regex:
    - '[a-zA-Z0-9_-]+'
