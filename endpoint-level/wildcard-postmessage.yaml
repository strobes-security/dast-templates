id: wildcard-postmessage
info:
  name: postMessage - Cross-Site Scripting
  author: pdteam
  severity: unknown
  description: postMessage contains a cross-site scripting vulnerability. An attacker
    can execute arbitrary script and therefore steal cookie-based authentication credentials
    and launch other attacks.
  reference:
  - https://jlajara.gitlab.io/web/2020/06/12/Dom_XSS_PostMessage.html
  - https://payatu.com/blog/anubhav.singh/postmessage-vulnerabilities
  - https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
  classification:
    cvss-metrics: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:N
    cvss-score: 7.2
    cwe-id: CWE-79
  metadata:
    max-request: 1
  tags: xss,postmessage,misconfig
  impact: '- Steal cookie-based authentication credentials and gain unauthorized access
    to the victim''s account

    - Execute arbitrary script on the victim''s browser, allowing the attacker to
    manipulate the web page and its content

    - Perform other malicious actions, such as keylogging, delivering malware, or
    conducting phishing attacks

    - Bypass same-origin policy restrictions and access sensitive data from other
    domains

    - Redirect the victim to a malicious website controlled by the attacker'
  remediation: 'To address the "postMessage - Cross-Site Scripting" vulnerability,
    developers should ensure that all user-supplied data is properly sanitized and
    validated before being used in the postMessage function. This can be achieved
    by implementing the following steps:


    - Perform input validation on all data received from the postMessage function,
    ensuring that it does not contain any malicious scripts or HTML tags. This can
    be done using a whitelist of allowed characters or by using a trusted library
    for HTML sanitization.

    - Encode all output that is generated from user-supplied data before displaying
    it on the page. This can be done using a library such as DOMPurify or by manually
    encoding special characters like "<" and ">" using HTML entities.

    - Implement a Content Security Policy (CSP) to restrict the sources from which
    the application can load scripts, stylesheets, and other resources. This can help
    prevent the execution of injected scripts.

    - Regularly review and update the application''s dependencies, as vulnerabilities
    in third-party libraries can also lead to cross-site scripting attacks.

    - Implement a robust, defense-in-depth security strategy that includes multiple
    layers of protection, such as input validation, output encoding, and CSP, to mitigate
    the risk of cross-site scripting attacks.'
http:
- method: GET
  path:
  - '{{BaseURL}}'
  matchers:
  - type: regex
    regex:
    - postMessage\([a-zA-Z]+,["']\*["']\)
