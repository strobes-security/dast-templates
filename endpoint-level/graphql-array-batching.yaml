id: graphql-array-batching
info:
  name: GraphQL Array-based Batching
  author: Dolev Farhi
  severity: info
  description: 'Some GraphQL engines support batching of multiple queries into a single
    request. This allows users to request multiple objects or multiple instances of
    objects efficiently.

    However, an attacker can leverage this feature to evade many security measures,
    including Rate Limit.

    '
  remediation: 'Deactivate or limit Batching in your GraphQL engine.

    '
  reference:
  - https://stackoverflow.com/questions/62421352/graphql-difference-between-using-alias-versus-multiple-query-objects-when-doin
  - https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application
  - https://graphql.security/
  metadata:
    max-request: 2
  tags: graphql,misconfig
  impact: '- Bypass rate limiting and other security controls by bundling multiple
    requests into a single batched query, allowing for significantly higher request
    volumes.

    - Perform enumeration and data extraction at a faster rate by executing multiple
    queries simultaneously, potentially exposing sensitive data.

    - Cause increased server load and potential denial of service by sending large
    batched queries with many nested requests.

    - Conceal malicious activity by distributing it across multiple requests within
    a single batched query, making it more difficult to detect and investigate.

    - Leverage the batching feature to carry out complex and coordinated attacks,
    such as a series of write operations that could result in a data breach or system
    compromise.'
http:
- raw:
  - 'POST /graphql HTTP/1.1

    Host: {{Hostname}}

    Content-Type: application/json


    [{"query":"query {\n __typename \n }"}, {"query":"mutation { \n __typename \n
    }"}]

    '
  - 'POST /api/graphql HTTP/1.1

    Host: {{Hostname}}

    Content-Type: application/json


    [{"query":"query {\n __typename \n }"}, {"query":"mutation { \n __typename \n
    }"}]

    '
  stop-at-first-match: true
  matchers-condition: and
  matchers:
  - type: word
    part: body
    words:
    - :"Query"
    - :"Mutations"
    case-insensitive: true
    condition: and
  - type: word
    part: header
    words:
    - application/json
