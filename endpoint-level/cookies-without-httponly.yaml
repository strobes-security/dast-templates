id: cookies-without-httponly
info:
  name: Cookies without HttpOnly attribute - Detect
  author: RJ Coleman,Mr.Bobo HP
  severity: info
  description: The absence of the HttpOnly attribute on cookies used by the application
    increases the risk of client-side attacks, potentially compromising user session
    security and data privacy. When cookies lack the HttpOnly flag, they can be accessed
    and manipulated by client-side scripts, enabling threats such as session hijacking.
    To address this vulnerability, developers should ensure that all cookies set in
    the application's HTTP responses are marked as HttpOnly. This mitigates the risk
    of cross-site scripting (XSS) attacks by preventing client-side scripts from accessing
    and interacting with the session cookies, thus enhancing the overall security
    of the application. Implementing this secure coding practice and regularly reviewing
    the application's security posture are crucial steps to address this vulnerability
    and protect the application and its users.
  impact: '- An attacker could access and manipulate the application''s session cookies
    using client-side scripts, enabling session hijacking and impersonation of legitimate
    users.

    - The absence of the HttpOnly attribute on cookies increases the risk of cross-site
    scripting (XSS) attacks, potentially allowing the attacker to steal sensitive
    information or perform unauthorized actions on behalf of the user.

    - The vulnerability could be exploited to bypass security controls and gain unauthorized
    access to the application''s data and functionality, compromising the overall
    security and privacy of the system.'
  remediation: 'Cookies without the HttpOnly attribute pose a significant security
    risk, as they can be accessed and manipulated by client-side scripts, potentially
    leading to session hijacking and other attacks. To address this issue, developers
    should ensure that all cookies set in the application''s HTTP responses are marked
    as HttpOnly. This mitigates the risk of cross-site scripting (XSS) attacks by
    preventing client-side scripts from accessing and interacting with the session
    cookies, thus enhancing the overall security of the application.


    - Review the application''s codebase and identify all instances where cookies
    are set in the HTTP response.

    - For each cookie, ensure that the HttpOnly flag is explicitly set to true.

    - Implement a secure coding practice to automatically set the HttpOnly flag on
    all cookies in the application.

    - Consider implementing a web application firewall (WAF) or other security controls
    to detect and block any cookies without the HttpOnly attribute.

    - Regularly review the application''s security posture and update the remediation
    strategy as needed.'
  reference:
  - https://owasp.org/www-community/HttpOnly
  classification:
    cvss-metrics: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N
    cvss-score: 0
  metadata:
    verified: true
    max-request: 1
  tags: misconfig,http,cookie,generic
flow: 'http()

  javascript()

  '
http:
- method: GET
  path:
  - '{{BaseURL}}'
  host-redirects: true
  max-redirects: 2
javascript:
- code: "content = template.http_all_headers\nconst setCookieLines = content\n  .split(/\\\
    r\\n/)\n  .filter(line => line.trim().toLowerCase().startsWith('set-cookie:'));\n\
    \nconst nonHttpOnlyCookies = setCookieLines.filter(line => !line.toLowerCase().includes('httponly'));\n\
    \nconst cookieNames = nonHttpOnlyCookies.map(line => {\n  const match = line.match(/set-cookie:\\\
    s*([^=]+)=/i);\n  return match ? match[1] : null;\n}).filter(Boolean);\ncookieNames\n"
  extractors:
  - type: regex
    regex:
    - '[a-zA-Z0-9_-]+'
