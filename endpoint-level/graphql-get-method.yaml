id: graphql-get-method
info:
  name: GraphQL CSRF / GET method
  author: Dolev Farhi
  severity: info
  description: The "GraphQL CSRF / GET method" vulnerability occurs when a GraphQL
    API allows the use of HTTP GET requests for sensitive operations, such as data
    modifications or privileged actions. This can lead to a Cross-Site Request Forgery
    (CSRF) attack, where an attacker can perform unauthorized actions on behalf of
    the victim user. The vulnerability arises because GET requests are typically not
    protected by CSRF tokens or other anti-forgery mechanisms, making them vulnerable
    to exploitation. An attacker could leverage this flaw to access sensitive user
    data, modify critical information, or even launch further attacks by compromising
    the affected application or its connected systems. To mitigate this vulnerability,
    it is crucial to implement robust CSRF protection for all GraphQL API endpoints,
    preferably by disabling the use of GET requests for sensitive operations and enforcing
    the use of POST requests with a validated CSRF token.
  reference:
  - https://graphql.org/learn/serving-over-http/#get-request
  - https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application
  - https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html
  - https://graphql.security/
  metadata:
    max-request: 2
  tags: graphql,misconfig
  impact: '- An attacker could perform unauthorized actions on behalf of the victim
    user, such as modifying sensitive data or performing privileged operations.

    - The attacker could gain access to sensitive information belonging to the victim
    user, such as personal data, financial details, or other confidential information.

    - The attacker could exploit the vulnerability to launch further attacks, such
    as session hijacking or escalating privileges within the application.

    - If the vulnerable GraphQL API is integrated with other critical systems, the
    attacker could potentially compromise those systems as well, leading to a broader
    impact.

    - The vulnerability could be exploited by the attacker to launch denial-of-service
    attacks, disrupting the availability of the application for legitimate users.'
  remediation: 'To address the "GraphQL CSRF / GET method" vulnerability, it is recommended
    to follow these remediation steps:


    Ensure that all GraphQL API endpoints, including queries, mutations, and subscriptions,
    are protected against CSRF attacks. This can be achieved by implementing a robust
    CSRF protection mechanism, such as using a CSRF token or Double Submit Cookie
    pattern, that verifies the origin of the request and validates the authenticity
    of the user''s session.


    Specific steps to follow:


    - Disable the use of HTTP GET requests for GraphQL operations that can modify
    data or perform sensitive actions. Instead, require the use of HTTP POST requests
    for all GraphQL mutations and sensitive queries.

    - Implement a CSRF token-based protection mechanism for your GraphQL API, where
    a unique token is generated and included in the request headers for every user
    session. Validate the presence and correctness of this token on the server-side
    before processing the request.

    - Consider using the "Double Submit Cookie" approach, where a CSRF token is stored
    in a cookie and also included in the request headers. This provides an additional
    layer of validation to ensure the authenticity of the request.

    - Educate developers on the importance of CSRF protection and the appropriate
    implementation techniques, and ensure that CSRF protection is consistently applied
    across all GraphQL API endpoints.

    - Regularly review and test your CSRF protection mechanisms to ensure they are
    effective and up-to-date with the latest security best practices.'
http:
- method: GET
  path:
  - '{{BaseURL}}/graphql?query={__typename}'
  - '{{BaseURL}}/api/graphql?query={__typename}'
  stop-at-first-match: true
  matchers-condition: and
  matchers:
  - type: word
    part: body
    words:
    - '"query"'
    - '"data"'
    - '"__typename"'
    case-insensitive: true
    condition: and
  - type: word
    part: header
    words:
    - application/json
