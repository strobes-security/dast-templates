id: reflection-ssti
info:
  name: Reflected SSTI Arithmetic Based
  author: pdteam
  severity: medium
  reference:
  - https://github.com/zaproxy/zap-extensions/blob/2d9898900abe85a47b9fe0ceb85ec39070816b98/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/SstiScanRule.java
  - https://github.com/DiogoMRSilva/websitesVulnerableToSSTI#list-of-seversneeds-update
  metadata:
    max-request: 14
  tags: ssti,dast
  description: The "Reflected SSTI Arithmetic Based" vulnerability is a security flaw
    that occurs when a web application fails to properly sanitize user input, allowing
    an attacker to inject malicious code through Server-Side Template Injection (SSTI).
    This vulnerability is particularly dangerous as it can enable the attacker to
    perform arithmetic operations within the application's template, leading to the
    execution of arbitrary code on the server. By crafting a specially-crafted input
    that incorporates mathematical expressions, an attacker can leverage this vulnerability
    to gain unauthorized access, escalate privileges, or launch further attacks against
    the system. The impact of this vulnerability can be severe, as it compromises
    the overall security of the web application and the underlying infrastructure,
    potentially exposing sensitive data, disrupting service availability, or allowing
    the attacker to perform malicious actions on the server.
  impact: '- Execution of arbitrary code on the server, allowing the attacker to gain
    full control of the system.

    - Potential access to sensitive data stored on the server, such as user credentials,
    financial information, or other confidential data.

    - Ability to escalate privileges and gain administrative access to the web application
    and its underlying infrastructure.

    - Potential for the attacker to launch further attacks, such as lateral movement
    within the network or the installation of malware or backdoors.

    - Disruption of the web application''s availability and functionality, leading
    to service outages or denials of service.'
  remediation: 'To address the "Reflected SSTI Arithmetic Based" vulnerability, it
    is essential to implement robust input validation and sanitization measures within
    the web application. This approach ensures that user-supplied inputs are thoroughly
    checked and any potentially malicious code or expressions are removed before being
    processed by the application''s template engine. By implementing these security
    measures, the risk of SSTI and arithmetic-based attacks can be significantly reduced,
    thereby enhancing the overall security of the web application and protecting against
    the potentially severe consequences of this vulnerability.


    - Implement comprehensive input validation: Thoroughly validate all user inputs,
    including query parameters, form fields, and any other sources of user-supplied
    data, to ensure that they do not contain any malicious code or expressions.

    - Apply strict output encoding: Ensure that all user-generated content is properly
    encoded before being rendered in the application''s templates, preventing the
    interpretation of any malicious code as executable instructions.

    - Utilize a trusted template engine: Consider using a template engine that is
    known to be secure and actively maintained, with a strong focus on preventing
    SSTI vulnerabilities.

    - Regularly review and update dependencies: Keep all third-party libraries, frameworks,
    and dependencies used in the application up to date, as security vulnerabilities
    may be discovered and addressed in these components over time.

    - Implement robust logging and monitoring: Establish comprehensive logging and
    monitoring mechanisms to detect and alert on any suspicious activity or attempted
    SSTI attacks, enabling prompt response and mitigation.'
variables:
  first: '{{rand_int(1000, 9999)}}'
  second: '{{rand_int(1000, 9999)}}'
  result: '{{to_number(first)*to_number(second)}}'
http:
- pre-condition:
  - type: dsl
    dsl:
    - method == "GET"
    - method == "POST"
  skip-variables-check: true
  payloads:
    ssti:
    - '{{concat("${", "{{first}}*{{second}}", "}")}}'
    - '{{concat("{{", "{{first}}*{{second}}", "}}")}}'
    - '{{concat("<%=", "{{first}}*{{second}}", "%>")}}'
    - '{{concat("{", "{{first}}*{{second}}", "}")}}'
    - '{{concat("{{{", "{{first}}*{{second}}", "}}}")}}'
    - '{{concat("${{", "{{first}}*{{second}}", "}}")}}'
    - '{{concat("#{", "{{first}}*{{second}}", "}")}}'
    - '{{concat("[[", "{{first}}*{{second}}", "]]")}}'
    - '{{concat("{{=", "{{first}}*{{second}}", "}}")}}'
    - '{{concat("[[${", "{{first}}*{{second}}", "}]]")}}'
    - '{{concat("${xyz|", "{{first}}*{{second}}", "}")}}'
    - '{{concat("#set($x=", "{{first}}*{{second}}", ")${x}")}}'
    - '{{concat("@(", "{{first}}*{{second}}", ")")}}'
    - '{{concat("{@", "{{first}}*{{second}}", "}")}}'
  fuzzing:
  - part: query
    type: postfix
    fuzz:
    - '{{ssti}}'
  - part: body
    type: postfix
    mode: single
    fuzz:
    - '{{ssti}}'
  - part: header
    type: postfix
    mode: single
    fuzz:
    - '{{ssti}}'
  - part: cookie
    type: postfix
    mode: single
    fuzz:
    - '{{ssti}}'
  - part: path
    type: postfix
    mode: single
    fuzz:
    - '{{ssti}}'
  stop-at-first-match: true
  matchers:
  - type: word
    part: body
    words:
    - '{{result}}'
